
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAME_LENGTH 65
#define MAX_ROLL_NUMBER_LENGTH 20
#define MAX_SUBJECTS 5

// Define the structure for student
typedef struct student {
    char name[MAX_NAME_LENGTH];
    char rollNumber[MAX_ROLL_NUMBER_LENGTH];
    char course[MAX_NAME_LENGTH];
    char subjects[MAX_SUBJECTS][MAX_NAME_LENGTH];
    struct student* next;
} Student;

// Function prototypes
Student* createStudent();
void addStudent(Student** head, Student* newStudent);
void ReadDataFromFile(Student** head);
void AddDataToFile(Student* head);
void displaySubjectsByCourse(const char* course);
void displayStudents(Student* head);
void searchStudent(Student* head, const char* rollNumber);
void deleteStudent(Student** head, const char* rollNumber);

int main() {
    Student* head = NULL;
    ReadDataFromFile(&head);

    while (1) {
        int choice;
        printf("\nStudent Course Registration\n");
        printf("---------------------------\n");
        printf("1. Register a student\n");
        printf("2. Deregister a student\n");
        printf("3. Search for a student\n");
        printf("4. Display registered students\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: {
                Student* newStudent = createStudent();

                printf("\nEnter Name: ");
                scanf(" %[^\n]s", newStudent->name);

                printf("Enter Roll Number: ");
                scanf(" %[^\n]s", newStudent->rollNumber);

                printf("Enter Course details (e.g., CSE,EEE): ");
                scanf(" %[^\n]s", newStudent->course);

                displaySubjectsByCourse(newStudent->course);

                printf("Enter the subjects you want to register (comma-separated): ");
                scanf(" %[^\n]s", newStudent->subjects[0]);

                char* token = strtok(newStudent->subjects[0], ",");
                int subjectCount = 0;

                while (token != NULL && subjectCount < MAX_SUBJECTS) {
                    strcpy(newStudent->subjects[subjectCount], token);
                    token = strtok(NULL, ",");
                    subjectCount++;
                }

                addStudent(&head, newStudent);
                AddDataToFile(head);

                break;
            }

            case 2: {
                char rollNumber[MAX_ROLL_NUMBER_LENGTH];
                printf("\nEnter Roll Number to delete: ");
                scanf(" %[^\n]s", rollNumber);
                deleteStudent(&head, rollNumber);
                AddDataToFile(head);
                break;
            }

            case 3: {
                char rollNumber[MAX_ROLL_NUMBER_LENGTH];
                printf("\nEnter Roll Number to search: ");
                scanf(" %[^\n]s", rollNumber);
                searchStudent(head, rollNumber);
                break;
            }

            case 4:
                displayStudents(head);
                break;

            case 5:
                printf("Exiting program...\n");
                exit(0);

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

// Function to create a new student
Student* createStudent() {
    Student* newStudent = (Student*)malloc(sizeof(Student));
    newStudent->next = NULL;
    return newStudent;
}

// Function to add a student to the list
void addStudent(Student** head, Student* newStudent) {
    if (*head == NULL) {
        *head = newStudent;
    } else {
        Student* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newStudent;
    }
}

// Function to read student data from a file
void ReadDataFromFile(Student** head) {
    FILE* file = fopen("studentrecords.csv", "r");
    if (file == NULL) {
        printf("Error: Unable to open file.\n");
        return;
    }

    char buffer[1024];
    fgets(buffer, sizeof(buffer), file);
    while (fgets(buffer, sizeof(buffer), file) != NULL) {
        Student* newStudent = createStudent();
        char* token = strtok(buffer, ",");
        int fieldCount = 0;

        while (token != NULL && fieldCount < 4 + MAX_SUBJECTS) {
            switch (fieldCount) {
                case 0:
                    strcpy(newStudent->name, token);
                    break;
                case 1:
                    strcpy(newStudent->rollNumber, token);
                    break;
                case 2:
                    strcpy(newStudent->course, token);
                    break;
                default:
                    if (strlen(token) > 0)
                        strcpy(newStudent->subjects[fieldCount - 3], token);
                    break;
            }

            token = strtok(NULL, ",");
            fieldCount++;
        }

        addStudent(head, newStudent);
    }

    fclose(file);
    printf("Student data loaded from studentrecords.csv.\n");
}

// Function to write student data to a file
void AddDataToFile(Student* head) {
    FILE* file = fopen("studentrecords.csv", "w");
    if (file == NULL) {
        printf("Error in opening file.\n");
        return;
    }

    int i;
    fprintf(file, "Name,Roll Number,Course,Subjects\n");
    Student* current = head;
    while (current != NULL) {
        fprintf(file, "%s,%s,%s,", current->name, current->rollNumber, current->course);
        for (i = 0; i < MAX_SUBJECTS; i++) {
            if (strlen(current->subjects[i]) > 0) {
                fprintf(file, "%s", current->subjects[i]);
                if (i != MAX_SUBJECTS - 1 && strlen(current->subjects[i + 1]) > 0)
                    fprintf(file, ",");
            }
        }
        fprintf(file, "\n");
        current = current->next;
    }

    fclose(file);
    printf("Student data saved to file.\n");
}

// Function to display subjects based on the course
void displaySubjectsByCourse(const char* course) {
    if (strcmp(course, "CSE") == 0) {
        printf("Subjects for CSE:\n");
        printf("Basic Level Programming\n");
        printf("C&C++\n");
        printf("Python\n");
        printf("Data Structures\n");
        printf("HTML\n");
    } else if (strcmp(course, "ECE") == 0) {
        printf("Subjects for ECE:\n");
        printf("BEEE\n");
        printf("Electronics\n");
        printf("Communications\n");
        printf("Physics\n");
        printf("Programming\n");
    } else if (strcmp(course, "EEE") == 0) {
        printf("Subjects for EEE:\n");
        printf("Electrical Machines\n");
        printf("Network Analysis\n");
        printf("Electrical Physics\n");
        printf("Programming\n");
    } else if (strcmp(course, "MECH") == 0) {
        printf("Subjects for MECH:\n");
        printf("Mechanics\n");
        printf("Mechatronics\n");
        printf("Electronics\n");
        printf("Machine Drawing\n");
        printf("Physics\n");
    } else if (strcmp(course, "CHEMICAL") == 0) {
        printf("Subjects for Chemical:\n");
        printf("Chemistry\n");
        printf("Chemical Engineering\n");
        printf("Mining\n");
        printf("Practical Engineering\n");
        printf("Programming\n");
    } else if (strcmp(course, "ARN") == 0) {
        printf("Subjects for Aeronautical:\n");
        printf("Aerodynamics\n");
        printf("Aircraft Design\n");
        printf("Material Sciences\n");
        printf("Engineering Drawing\n");
        printf("Fluid Mechanics\n");
    } else if (strcmp(course, "CIV") == 0) {
        printf("Subjects for CIVIL:\n");
        printf("Planning\n");
        printf("Drawing\n");
        printf("Designing\n");
        printf("Programming\n");
    } else if (strcmp(course, "BIOTEC") == 0) {
        printf("Subjects for Biotechnology:\n");
        printf("Microbiology\n");
        printf("Bioinformatics\n");
        printf("Biochemistry\n");
        printf("Open lab\n");
        printf("Genetic engineering\n");
    } else {
        printf("Invalid course selected.\n");
    }
}

// Function to display all registered students
void displayStudents(Student* head) {
    int i;
    if (head == NULL) {
        printf("No students registered.\n");
        return;
    }

    printf("Registered Students:\n");

    Student* current = head;
    while (current != NULL) {
        printf("Name: %s\n", current->name);
        printf("Roll Number: %s\n", current->rollNumber);
        printf("Course: %s\n", current->course);
        printf("Subjects: ");
        for (i = 0; i < MAX_SUBJECTS; i++) {
            printf("%s", current->subjects[i]);
            if (i != MAX_SUBJECTS - 1 && strlen(current->subjects[i + 1]) > 0)
                printf(", ");
        }
        printf("\n\n");
        current = current->next;
    }
}

// Function to search for a student by roll number
void searchStudent(Student* head, const char* rollNumber) {
    if (head == NULL) {
        printf("No students registered.\n");
        return;
    }

    int i;
    Student* current = head;
    while (current != NULL) {
        if (strcmp(current->rollNumber, rollNumber) == 0) {
            printf("Student Found\n");
            printf("Name: %s\n", current->name);
            printf("Roll Number: %s\n", current->rollNumber);
            printf("Course: %s\n", current->course);
            printf("Subjects: ");
            for (i = 0; i < MAX_SUBJECTS; i++) {
                printf("%s", current->subjects[i]);
                if (i != MAX_SUBJECTS - 1 && strlen(current->subjects[i + 1]) > 0)
                    printf(", ");
            }
            printf("\n\n");
            return;
        }
        current = current->next;
    }

    printf("Student with roll number %s not found.\n", rollNumber);
}

// Function to delete a student by roll number
void deleteStudent(Student** head, const char* rollNumber) {
    if (*head == NULL) {
        printf("No students registered.\n");
        return;
    }

    Student* current = *head;
    Student* previous = NULL;

    while (current != NULL) {
        if (strcmp(current->rollNumber, rollNumber) == 0) {
            if (previous == NULL) {
                // Student to be deleted is the head
                *head = current->next;
            } else {
                previous->next = current->next;
            }
            free(current);
            printf("Student with roll number %s deleted.\n", rollNumber);
            return;
        }
        previous = current;
        current = current->next;
    }

    printf("Student with roll number %s not found.\n", rollNumber);
}
